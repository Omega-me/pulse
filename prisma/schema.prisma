// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  clerkId   String   @unique
  email     String   @unique
  firstname String?
  lastname  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  metadata  Json?

  subscription Subscription?
  automations  Automations[]
  integrations Integrations[]
}

model Subscription {
  id         String           @id @default(uuid()) @db.Uuid
  plan       SubscriptionPlan @default(FREE)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @default(now())
  customerId String?          @unique
  metadata   Json?

  User   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.Uuid
}

model Integrations {
  id            String          @id @default(uuid()) @db.Uuid
  name          IntegrationType @default(INSTAGRAM)
  token         String          @unique
  integrationId String?         @unique // TODO: display a message to the user if id exists when creating an integration
  expiresAt     DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  metadata      Json?

  User   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.Uuid

  Product Product[]
}

model Automations {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @default("Untitled")
  active    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  User     User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String @db.Uuid
  metadata Json?

  triggers Trigger[]
  listener Listener?
  posts    Post[]
  keywords Keyword[]
  dms      Dms[]
}

model Trigger {
  id        String   @id @default(uuid()) @db.Uuid
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  metadata  Json?

  Automation   Automations? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?      @db.Uuid
}

model Keyword {
  id        String   @id @default(uuid()) @db.Uuid
  word      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  userId    String
  metadata  Json?

  Automation   Automations? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?      @db.Uuid
  Dms          Dms[]

  @@unique([automationId, word])
}

model Listener {
  id           String       @id @default(uuid()) @db.Uuid
  listener     ListenerType @default(MESSAGE)
  prompt       String
  commentReply String?
  dmCount      Int
  commentCount Int
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now())
  metadata     Json?

  Automation   Automations? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?      @unique @db.Uuid
}

model Dms {
  id       String  @id @default(uuid()) @db.Uuid
  senderId String?
  reciever String?
  message  String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  system_dm   Boolean
  usedSmartAI Boolean
  metadata    Json?

  Automation   Automations? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?      @db.Uuid

  Keyword   Keyword? @relation(fields: [keywordId], references: [id], onDelete: Cascade)
  keywordId String?  @db.Uuid
}

model Post {
  id        String    @id @default(uuid()) @db.Uuid
  postid    String
  caption   String?
  media     String
  mediaType MediaType @default(IMAGE)
  postType  PostType  @default(POST)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  metadata  Json?

  Automation   Automations? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?      @db.Uuid
}

model Product {
  id          String        @id @default(uuid()) @db.Uuid
  source      ProductSource
  externalId  String? // ID from Shopify or WooCommerce
  title       String
  description String?
  price       Float?
  discount    Float?        @default(0.0) // Percentage discount
  currency    String?       @default("EUR")
  imageUrl    String?
  productUrl  String? // Link to Shopify/WooCommerce product
  sku         String?
  units       Int?          @default(1) // Number of units available
  available   Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  metadata    Json?

  // Source references
  integrationId String?       @db.Uuid
  Integration   Integrations? @relation(fields: [integrationId], references: [id])
}

// TODO: Orders table

enum ProductSource {
  SHOPIFY
  WOOCOMMERCE
  INSTAGRAM
  MANUAL
}

enum SubscriptionPlan {
  PRO
  FREE
}

enum IntegrationType {
  INSTAGRAM
  FACEBOOK
  SHOPIFY
  WOOCOMMERCE
}

enum MediaType {
  IMAGE
  VIDEO
  CAROUSEL_ALBUM
}

enum PostType {
  POST
  AD
}

enum ListenerType {
  SMARTAI
  MESSAGE
}
