// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  clerkId   String   @unique
  email     String   @unique
  firstname String?
  lastname  String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  metadata  Json?

  subscription Subscription?
  automations  Automation[]
  integrations Integration[]
  stats        Stat[]
  Order        Order[]

  @@map("users")
}

model Subscription {
  id         String           @id @default(uuid()) @db.Uuid
  plan       SubscriptionPlan @default(FREE)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @default(now())
  customerId String?          @unique
  metadata   Json?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.Uuid

  @@map("subscriptions")
}

model Integration {
  id            String          @id @default(uuid()) @db.Uuid
  name          IntegrationType @default(INSTAGRAM)
  token         String          @unique
  integrationId String?         @unique
  expiresAt     DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  metadata      Json?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.Uuid

  products Product[]

  @@map("integrations")
}

model Automation {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @default("Untitled")
  active    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  metadata  Json?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.Uuid

  triggers  Trigger[]
  listeners Listener[]
  posts     Post[]
  keywords  Keyword[]
  dms       Dm[]
  stats     Stat[]

  @@map("automations")
}

model Trigger {
  id        String      @id @default(uuid()) @db.Uuid
  type      TriggerType
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now())
  metadata  Json?

  automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String     @db.Uuid

  @@map("triggers")
}

model Keyword {
  id        String   @id @default(uuid()) @db.Uuid
  word      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  userId    String
  metadata  Json?

  automationId String?     @db.Uuid
  automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)

  listenerId String?   @db.Uuid
  listener   Listener? @relation(fields: [listenerId], references: [id], onDelete: Cascade)

  dms                 Dm[]
  stats               Stat[]
  ConversationSession ConversationSession[]

  @@unique([automationId, word])
  @@map("keywords")
}

model Listener {
  id                     String       @id @default(uuid()) @db.Uuid
  listener               ListenerType @default(MESSAGE)
  isActive               Boolean      @default(true)
  prompt                 String
  commentReply           String?
  dmCount                Int
  commentCount           Int
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @default(now())
  priority               Int
  continuousConversation Boolean      @default(false)
  metadata               Json?

  automationId String?     @db.Uuid
  automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)

  keywords             Keyword[]
  conversationSessions ConversationSession[]
  stats                Stat[]

  @@map("listeners")
}

model Dm {
  id          String   @id @default(uuid()) @db.Uuid
  senderId    String?
  reciever    String?
  message     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  system_dm   Boolean
  usedSmartAI Boolean
  metadata    Json?

  automationId String?     @db.Uuid
  automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)

  keywordId             String?              @db.Uuid
  keyword               Keyword?             @relation(fields: [keywordId], references: [id], onDelete: Cascade)
  order                 Order[]
  conversationSession   ConversationSession? @relation(fields: [conversationSessionId], references: [id], onDelete: Cascade)
  conversationSessionId String?              @db.Uuid

  @@map("dms")
}

model ConversationSession {
  id         String   @id @default(uuid()) @db.Uuid
  receiverId String
  senderId   String
  listenerId String   @db.Uuid
  keywordId  String   @db.Uuid
  startedAt  DateTime @default(now())
  expiresAt  DateTime
  metadata   Json?

  dms      Dm[]
  listener Listener @relation(fields: [listenerId], references: [id], onDelete: Cascade)
  keyword  Keyword  @relation(fields: [keywordId], references: [id], onDelete: Cascade)

  @@map("conversation_sessions")
}

model Post {
  id        String    @id @default(uuid()) @db.Uuid
  postid    String
  caption   String?
  media     String
  mediaType MediaType @default(IMAGE)
  postType  PostType  @default(POST)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  metadata  Json?

  automationId String?     @db.Uuid
  automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)

  stats Stat[]

  @@map("posts")
}

model Product {
  id          String        @id @default(uuid()) @db.Uuid
  source      ProductSource
  externalId  String?
  title       String
  description String?
  price       Float?
  discount    Float?        @default(0.0)
  currency    String?       @default("EUR")
  imageUrl    String?
  productUrl  String?
  sku         String?
  units       Int?          @default(1)
  available   Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  metadata    Json?

  integrationId String?      @db.Uuid
  integration   Integration? @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  OrderItem     OrderItem[]

  @@map("products")
}

model Order {
  id          String      @id @default(uuid()) @db.Uuid
  userId      String      @db.Uuid
  dmId        String?     @db.Uuid
  totalAmount Float       @default(0.0) // Total price of the order
  currency    String      @default("EUR")
  status      OrderStatus @default(PENDING)
  metadata    Json? // Optional for custom info like discounts, delivery notes
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderType   OrderType   @default(SMART_AI)

  // Relations
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  Stat       Stat[]
  dm         Dm?         @relation(fields: [dmId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([createdAt])
  @@map("orders")
}

model OrderItem {
  id        String @id @default(uuid()) @db.Uuid
  orderId   String @db.Uuid
  productId String @db.Uuid
  quantity  Int    @default(1)
  price     Float // Price per unit at the time of purchase
  discount  Float? @default(0.0) // Percentage or fixed discount
  metadata  Json?

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Restrict)

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

model Stat {
  id            String   @id @default(uuid()) @db.Uuid
  userId        String   @db.Uuid
  automationId  String?  @db.Uuid
  listenerId    String?  @db.Uuid
  keywordId     String?  @db.Uuid
  postId        String?  @db.Uuid
  orderId       String?  @db.Uuid
  date          DateTime // Day only, truncate time
  keywordHits   Int      @default(0)
  triggersCount Int      @default(0)
  ordersCount   Int      @default(0)
  metadata      Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  keyword    Keyword?    @relation(fields: [keywordId], references: [id], onDelete: Cascade)
  listener   Listener?   @relation(fields: [listenerId], references: [id], onDelete: Cascade)
  post       Post?       @relation(fields: [postId], references: [id], onDelete: Cascade)
  automation Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  order      Order?      @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@unique([userId, automationId, listenerId, keywordId, postId, date])
  @@index([date])
  @@index([userId, date])
  @@index([automationId, date])
  @@map("stats")
}

enum ProductSource {
  SHOPIFY
  WOOCOMMERCE
  INSTAGRAM
  MANUAL
}

enum SubscriptionPlan {
  PRO
  FREE
}

enum IntegrationType {
  INSTAGRAM
  FACEBOOK
  SHOPIFY
  WOOCOMMERCE
}

enum MediaType {
  IMAGE
  VIDEO
  CAROUSEL_ALBUM
}

enum PostType {
  POST
  AD
}

enum ListenerType {
  SMARTAI
  MESSAGE
}

enum TriggerType {
  COMMENT
  DM
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum OrderType {
  ONLINE
  IN_STORE
  SMART_AI
}
